var mysql = require('mysql');
var express = require('express');
var bodyParser = require('body-parser');
var path = require('path');
var options = require('./options');

const app = express();

/**
 * connect to the database
 * for elastic beanstalk, go to software configuration under configuration 
 * and add the key values pairs under environment properties.
 * eg property name: RDS_DB_NAME, property value: mobile_crowsensing
 * must not have configuration in your code in production
 */
con = mysql.createConnection({
    host: options.storageConfig.host,           // process.env.RDS_HOSTNAME
    user: options.storageConfig.user,           // process.env.RDS_USERNAME
    password: options.storageConfig.password,   // process.env.RDS_PASSWORD
    database: options.storageConfig.database,   // process.env.RDS_DB_NAME
    port: options.storageConfig.port            // process.env.RDS_PORT
});

var maxDeviceId;

/**
 * create table if it does not exist, and get the max value of cookie id 
 * (to assign to next new visitor)
 */
con.connect((err) => {
    if (err) throw err;
    var sql = "CREATE TABLE IF NOT EXISTS users (id INT AUTO_INCREMENT PRIMARY KEY, " + 
        "device INT, fingerprint VARCHAR(255), ts TIMESTAMP(0), lat DOUBLE, lon DOUBLE, " + 
        "alt DOUBLE, acc DOUBLE, heading DOUBLE, speed DOUBLE, host VARCHAR(255), " + 
        "lang VARCHAR(255), os VARCHAR(255))";
    con.query(sql, (err, result) => {
        if (err) throw err;
    });

    con.query("SELECT COALESCE(MAX(device), -1) AS device FROM users", 
            (err, results, fields) => {
                if (err) throw err;
                maxDeviceId = results[0].device;
            });

});

app.use(bodyParser.json());
app.use(express.static('static_scripts'));
var htmlPath = path.join(__dirname + '/frontend.html');

// ad_frontend.min.html hides the latitude and longitude display, use for production
// var htmlPath = path.join(__dirname + '/ad_frontend.min.html');

/**
 * allow cors
 * @param {*} req request 
 * @param {*} res response
 * @param {*} next next matching route
 */
app.use((req, res, next) => {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');
    res.header('Access-Control-Allow-Headers', 'Content-Type');

    next();
});

/**
 * return maxDeviceId for frontend to access and assign to new visitors
 */
app.get('/maxdevice', (request, response) => response.status(200).send(maxDeviceId.toString()));

/**
 * sends html file to be displayed to client
 */
app.get('/', (request, response) => response.sendFile(htmlPath));

/**
 * receive response from client and add collected information to database
 */
app.post('/data', (request, response) => {
    response.sendFile(htmlPath);
    var time = request.body.ts;
    var device = request.body.device;
    var fingerprint = request.body.fingerprint;
    var lat = request.body.lat;
    var lon = request.body.lon;
    var altitude = request.body.altitude;
    var accuracy = request.body.accuracy;
    var heading = request.body.heading;
    var speed = request.body.speed;
    var host = request.body.host;
    var lang = request.body.lang;
    var os = request.body.os;

    console.log("time: " + time + ", device: " + device + ', fingerprint: ' + fingerprint + 
            ', lat: ' + lat + ", lon: " + lon + "\nalt: " + altitude + ", acc: " + accuracy + 
            ", heading: " + heading + ", speed: " + speed + ", host: " + host + ", lang: " + 
            lang + ", os: " + os);
    addRecord(time, device, fingerprint, lat, lon, altitude, accuracy, heading, speed, host, lang, os);
});

/**
 * helper method to add record to database
 * @param {*} time current time stamp 
 * @param {*} device unique device id from cookie
 * @param {*} fingerprint unique browser fingerprint generated by FingerprintJS2 library
 * @param {*} lat latitude
 * @param {*} lon longitude
 * @param {*} altitude height of device (if available)
 * @param {*} accuracy accuracy of geolocation (if available)
 * @param {*} heading direction of movement (if available)
 * @param {*} speed speed of movement (if available)
 * @param {*} host host name of current website
 * @param {*} lang browser default language
 * @param {*} os operating system
 */
function addRecord(time, device, fingerprint, lat, lon, altitude, accuracy, heading, speed, host, lang, os) {
    console.log("Adding record...");
    var sql = "INSERT INTO users SET ts = ?, device = ?, fingerprint = ?, lat = ?, lon = ?, alt = ?, " + 
        "acc = ?, heading = ?, speed = ?, host = ?, lang = ?, os = ?";
    con.query(sql, [time, device, fingerprint, lat, lon, altitude, accuracy, heading, speed, host, lang, os]);
}

app.listen(8000, '0.0.0.0'); // AWS: process.env.port
console.log("running on port 8000");
